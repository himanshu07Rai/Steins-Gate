version: '3'  # Use 3.8 for health check support
services:
  postgres_db:
    image: postgres:latest
    container_name: postgresCont
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - my-network

  my-redis:
    image: redis
    container_name: my-redis-container
    ports:
      - 6379:6379
    restart: always
    volumes:
      - redis_volume_data:/data
    networks:
      - my-network

  zookeeper:
    container_name: zookeeperCont
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - my-network

  kafka:
    container_name: kafkaCont
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    command: sh -c "((sleep 15 && kafka-topics --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 3 --topic chat-messages)&) && /etc/confluent/docker/run "
    networks:
      - my-network
  
  server:
    container_name: serverCont
    build: ./apps/server
    ports:
      - "8080:8080"
    depends_on:
      - postgres_db
      - my-redis
      - kafka
    networks:
      - my-network
  
  # client:
  #   container_name: clientCont
  #   build: ./apps/web
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - my-network
  #   depends_on:
  #     - server
  #   environment:
  #     - NEXT_PUBLIC_BACKEND_URL=http://server:8080
  #     - NEXT_PUBLIC_SOCKET_URL=http://server:8080
  #     - NEXT_PUBLIC_APP_URL=http://localhost:3000
  #   env_file:
  #     - ./apps/web/.env.local

volumes:
  postgres-data:
  redis_volume_data:

networks:
  my-network:
    driver: bridge
